import java.util.ArrayList;

class Student {
    private int rollno;
    private String name;
    private String address;

    public Student(int rollno, String name, String address) {
        this.rollno = rollno;
        this.name = name;
        this.address = address;
    }

    public int getRollno() {
        return rollno;
    }

    @Override
    public String toString() {
        return "Student{" + "rollno=" + rollno + ", name='" + name + "', address='" + address + "'}";
    }
}

public class MergeSortStudents {

    // Merge sort logic for ArrayList<Student>
    public void mergeSort(ArrayList<Student> students, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            // Sort left half
            mergeSort(students, left, mid);
            // Sort right half
            mergeSort(students, mid + 1, right);
            // Merge the two halves
            merge(students, left, mid, right);
        }
    }

    // Merging two sorted halves
    private void merge(ArrayList<Student> students, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Temporary arrays to hold the split halves
        ArrayList<Student> leftList = new ArrayList<>(n1);
        ArrayList<Student> rightList = new ArrayList<>(n2);

        // Copy data into temporary arrays
        for (int i = 0; i < n1; i++) {
            leftList.add(students.get(left + i));
        }
        for (int j = 0; j < n2; j++) {
            rightList.add(students.get(mid + 1 + j));
        }

        // Merge the temporary arrays back into the original list
        int i = 0, j = 0;
        int k = left;
        while (i < n1 && j < n2) {
            if (leftList.get(i).getRollno() <= rightList.get(j).getRollno()) {
                students.set(k, leftList.get(i));
                i++;
            } else {
                students.set(k, rightList.get(j));
                j++;
            }
            k++;
        }

        // Copy remaining elements of leftList if any
        while (i < n1) {
            students.set(k, leftList.get(i));
            i++;
            k++;
        }

        // Copy remaining elements of rightList if any
        while (j < n2) {
            students.set(k, rightList.get(j));
            j++;
            k++;
        }
    }

    // Main method to test the merge sort
    public static void main(String[] args) {
        // Initialize the ArrayList of students
        ArrayList<Student> students = new ArrayList<>();
        students.add(new Student(3, "Jorge", "Virginia"));
        students.add(new Student(1, "Carlos", "Pennsylvania"));
        students.add(new Student(10, "Frank", "Detroit"));
        students.add(new Student(5, "John", "Maine"));
        students.add(new Student(2, "Lincoln", "Winwood"));
        students.add(new Student(7, "Ruben", "Miami"));
        students.add(new Student(4, "Anibal", "North Miami"));
        students.add(new Student(8, "Maitte", "Hialeah"));
        students.add(new Student(6, "Irsa", "Hollywood"));
        students.add(new Student(9, "Nayelin", "Jacksonville"));

        System.out.println("Before Sorting:");
        for (Student student : students) {
            System.out.println(student);
        }

        // Perform merge sort on the students list
        MergeSortStudents sorter = new MergeSortStudents();
        sorter.mergeSort(students, 0, students.size() - 1);

        System.out.println("\nAfter Sorting by Roll Number:");
        for (Student student : students) {
            System.out.println(student);
        }
    }
}
